/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PProgram2 : Node
{
}

public abstract class PProgram3 : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PArguments : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PElseStatement : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class PConstantDec : Node
{
}

public abstract class PFunctionDec : Node
{
}

public abstract class PMainProgram : Node
{
}

public abstract class POrExpression : Node
{
}

public abstract class PAndExpression : Node
{
}

public abstract class PEqualExpressions : Node
{
}

public abstract class PQuantityExpression : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AConstantProgram : PProgram
{
    private PConstantDec _constant_dec_;
    private PProgram _program_;

    public AConstantProgram ()
    {
    }

    public AConstantProgram (
            PConstantDec _constant_dec_,
            PProgram _program_
    )
    {
        SetConstantDec (_constant_dec_);
        SetProgram (_program_);
    }

    public override Object Clone()
    {
        return new AConstantProgram (
            (PConstantDec)CloneNode (_constant_dec_),
            (PProgram)CloneNode (_program_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantProgram(this);
    }

    public PConstantDec GetConstantDec ()
    {
        return _constant_dec_;
    }

    public void SetConstantDec (PConstantDec node)
    {
        if(_constant_dec_ != null)
        {
            _constant_dec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_dec_ = node;
    }
    public PProgram GetProgram ()
    {
        return _program_;
    }

    public void SetProgram (PProgram node)
    {
        if(_program_ != null)
        {
            _program_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _program_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_dec_)
            + ToString (_program_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_dec_ == child )
        {
            _constant_dec_ = null;
            return;
        }
        if ( _program_ == child )
        {
            _program_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_dec_ == oldChild )
        {
            SetConstantDec ((PConstantDec) newChild);
            return;
        }
        if ( _program_ == oldChild )
        {
            SetProgram ((PProgram) newChild);
            return;
        }
    }

}
public sealed class APassProgram : PProgram
{
    private PProgram2 _program2_;

    public APassProgram ()
    {
    }

    public APassProgram (
            PProgram2 _program2_
    )
    {
        SetProgram2 (_program2_);
    }

    public override Object Clone()
    {
        return new APassProgram (
            (PProgram2)CloneNode (_program2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassProgram(this);
    }

    public PProgram2 GetProgram2 ()
    {
        return _program2_;
    }

    public void SetProgram2 (PProgram2 node)
    {
        if(_program2_ != null)
        {
            _program2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _program2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_program2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _program2_ == child )
        {
            _program2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _program2_ == oldChild )
        {
            SetProgram2 ((PProgram2) newChild);
            return;
        }
    }

}
public sealed class AMultipleProgram2 : PProgram2
{
    private PFunctionDec _function_dec_;
    private PProgram2 _program2_;

    public AMultipleProgram2 ()
    {
    }

    public AMultipleProgram2 (
            PFunctionDec _function_dec_,
            PProgram2 _program2_
    )
    {
        SetFunctionDec (_function_dec_);
        SetProgram2 (_program2_);
    }

    public override Object Clone()
    {
        return new AMultipleProgram2 (
            (PFunctionDec)CloneNode (_function_dec_),
            (PProgram2)CloneNode (_program2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleProgram2(this);
    }

    public PFunctionDec GetFunctionDec ()
    {
        return _function_dec_;
    }

    public void SetFunctionDec (PFunctionDec node)
    {
        if(_function_dec_ != null)
        {
            _function_dec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_dec_ = node;
    }
    public PProgram2 GetProgram2 ()
    {
        return _program2_;
    }

    public void SetProgram2 (PProgram2 node)
    {
        if(_program2_ != null)
        {
            _program2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _program2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_dec_)
            + ToString (_program2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_dec_ == child )
        {
            _function_dec_ = null;
            return;
        }
        if ( _program2_ == child )
        {
            _program2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_dec_ == oldChild )
        {
            SetFunctionDec ((PFunctionDec) newChild);
            return;
        }
        if ( _program2_ == oldChild )
        {
            SetProgram2 ((PProgram2) newChild);
            return;
        }
    }

}
public sealed class APassProgram2 : PProgram2
{
    private PProgram3 _program3_;

    public APassProgram2 ()
    {
    }

    public APassProgram2 (
            PProgram3 _program3_
    )
    {
        SetProgram3 (_program3_);
    }

    public override Object Clone()
    {
        return new APassProgram2 (
            (PProgram3)CloneNode (_program3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassProgram2(this);
    }

    public PProgram3 GetProgram3 ()
    {
        return _program3_;
    }

    public void SetProgram3 (PProgram3 node)
    {
        if(_program3_ != null)
        {
            _program3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _program3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_program3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _program3_ == child )
        {
            _program3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _program3_ == oldChild )
        {
            SetProgram3 ((PProgram3) newChild);
            return;
        }
    }

}
public sealed class AMainProgram3 : PProgram3
{
    private PMainProgram _main_program_;

    public AMainProgram3 ()
    {
    }

    public AMainProgram3 (
            PMainProgram _main_program_
    )
    {
        SetMainProgram (_main_program_);
    }

    public override Object Clone()
    {
        return new AMainProgram3 (
            (PMainProgram)CloneNode (_main_program_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainProgram3(this);
    }

    public PMainProgram GetMainProgram ()
    {
        return _main_program_;
    }

    public void SetMainProgram (PMainProgram node)
    {
        if(_main_program_ != null)
        {
            _main_program_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_program_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_program_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_program_ == child )
        {
            _main_program_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_program_ == oldChild )
        {
            SetMainProgram ((PMainProgram) newChild);
            return;
        }
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ANoneStatements : PStatements
{


    public ANoneStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class AConditionalStatement : PStatement
{
    private PIfStatement _if_statement_;

    public AConditionalStatement ()
    {
    }

    public AConditionalStatement (
            PIfStatement _if_statement_
    )
    {
        SetIfStatement (_if_statement_);
    }

    public override Object Clone()
    {
        return new AConditionalStatement (
            (PIfStatement)CloneNode (_if_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConditionalStatement(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
    }

}
public sealed class ALoopStatement : PStatement
{
    private PWhileStatement _while_statement_;

    public ALoopStatement ()
    {
    }

    public ALoopStatement (
            PWhileStatement _while_statement_
    )
    {
        SetWhileStatement (_while_statement_);
    }

    public override Object Clone()
    {
        return new ALoopStatement (
            (PWhileStatement)CloneNode (_while_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopStatement(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
    }

}
public sealed class AMultipleArguments : PArguments
{
    private POrExpression _or_expression_;
    private TComma _comma_;
    private PArguments _arguments_;

    public AMultipleArguments ()
    {
    }

    public AMultipleArguments (
            POrExpression _or_expression_,
            TComma _comma_,
            PArguments _arguments_
    )
    {
        SetOrExpression (_or_expression_);
        SetComma (_comma_);
        SetArguments (_arguments_);
    }

    public override Object Clone()
    {
        return new AMultipleArguments (
            (POrExpression)CloneNode (_or_expression_),
            (TComma)CloneNode (_comma_),
            (PArguments)CloneNode (_arguments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleArguments(this);
    }

    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_expression_)
            + ToString (_comma_)
            + ToString (_arguments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
    }

}
public sealed class ASingleArguments : PArguments
{
    private POrExpression _or_expression_;

    public ASingleArguments ()
    {
    }

    public ASingleArguments (
            POrExpression _or_expression_
    )
    {
        SetOrExpression (_or_expression_);
    }

    public override Object Clone()
    {
        return new ASingleArguments (
            (POrExpression)CloneNode (_or_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleArguments(this);
    }

    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
    }

}
public sealed class ANoneArguments : PArguments
{


    public ANoneArguments (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneArguments (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneArguments(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMultipleParameters : PParameters
{
    private TId _type_;
    private TId _varname_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMultipleParameters ()
    {
    }

    public AMultipleParameters (
            TId _type_,
            TId _varname_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParameters (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParameters(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private TId _type_;
    private TId _varname_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            TId _type_,
            TId _varname_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class ANoneParameters : PParameters
{


    public ANoneParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationDeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclarationDeclareStatement ()
    {
    }

    public ADeclarationDeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclarationDeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationDeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ACallFunctionCallStatement : PFunctionCallStatement
{
    private TId _id_;
    private TOpenParent _open_parent_;
    private PArguments _arguments_;
    private TCloseParent _close_parent_;
    private TEol _eol_;

    public ACallFunctionCallStatement ()
    {
    }

    public ACallFunctionCallStatement (
            TId _id_,
            TOpenParent _open_parent_,
            PArguments _arguments_,
            TCloseParent _close_parent_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenParent (_open_parent_);
        SetArguments (_arguments_);
        SetCloseParent (_close_parent_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ACallFunctionCallStatement (
            (TId)CloneNode (_id_),
            (TOpenParent)CloneNode (_open_parent_),
            (PArguments)CloneNode (_arguments_),
            (TCloseParent)CloneNode (_close_parent_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallFunctionCallStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParent GetOpenParent ()
    {
        return _open_parent_;
    }

    public void SetOpenParent (TOpenParent node)
    {
        if(_open_parent_ != null)
        {
            _open_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parent_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TCloseParent GetCloseParent ()
    {
        return _close_parent_;
    }

    public void SetCloseParent (TCloseParent node)
    {
        if(_close_parent_ != null)
        {
            _close_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parent_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parent_)
            + ToString (_arguments_)
            + ToString (_close_parent_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parent_ == child )
        {
            _open_parent_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _close_parent_ == child )
        {
            _close_parent_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parent_ == oldChild )
        {
            SetOpenParent ((TOpenParent) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _close_parent_ == oldChild )
        {
            SetCloseParent ((TCloseParent) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignmentAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private POrExpression _or_expression_;
    private TEol _eol_;

    public AAssignmentAssignStatement ()
    {
    }

    public AAssignmentAssignStatement (
            TId _id_,
            TAssign _assign_,
            POrExpression _or_expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetOrExpression (_or_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignmentAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (POrExpression)CloneNode (_or_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_or_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AConditionalIfStatement : PIfStatement
{
    private TKeywordIf _keyword_if_;
    private TOpenParent _open_parent_;
    private POrExpression _or_expression_;
    private TCloseParent _close_parent_;
    private TLeftBracket _left_bracket_;
    private PStatements _statements_;
    private TRightBracket _right_bracket_;
    private PElseStatement _else_statement_;

    public AConditionalIfStatement ()
    {
    }

    public AConditionalIfStatement (
            TKeywordIf _keyword_if_,
            TOpenParent _open_parent_,
            POrExpression _or_expression_,
            TCloseParent _close_parent_,
            TLeftBracket _left_bracket_,
            PStatements _statements_,
            TRightBracket _right_bracket_,
            PElseStatement _else_statement_
    )
    {
        SetKeywordIf (_keyword_if_);
        SetOpenParent (_open_parent_);
        SetOrExpression (_or_expression_);
        SetCloseParent (_close_parent_);
        SetLeftBracket (_left_bracket_);
        SetStatements (_statements_);
        SetRightBracket (_right_bracket_);
        SetElseStatement (_else_statement_);
    }

    public override Object Clone()
    {
        return new AConditionalIfStatement (
            (TKeywordIf)CloneNode (_keyword_if_),
            (TOpenParent)CloneNode (_open_parent_),
            (POrExpression)CloneNode (_or_expression_),
            (TCloseParent)CloneNode (_close_parent_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (PStatements)CloneNode (_statements_),
            (TRightBracket)CloneNode (_right_bracket_),
            (PElseStatement)CloneNode (_else_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConditionalIfStatement(this);
    }

    public TKeywordIf GetKeywordIf ()
    {
        return _keyword_if_;
    }

    public void SetKeywordIf (TKeywordIf node)
    {
        if(_keyword_if_ != null)
        {
            _keyword_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_if_ = node;
    }
    public TOpenParent GetOpenParent ()
    {
        return _open_parent_;
    }

    public void SetOpenParent (TOpenParent node)
    {
        if(_open_parent_ != null)
        {
            _open_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parent_ = node;
    }
    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TCloseParent GetCloseParent ()
    {
        return _close_parent_;
    }

    public void SetCloseParent (TCloseParent node)
    {
        if(_close_parent_ != null)
        {
            _close_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parent_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }
    public PElseStatement GetElseStatement ()
    {
        return _else_statement_;
    }

    public void SetElseStatement (PElseStatement node)
    {
        if(_else_statement_ != null)
        {
            _else_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_if_)
            + ToString (_open_parent_)
            + ToString (_or_expression_)
            + ToString (_close_parent_)
            + ToString (_left_bracket_)
            + ToString (_statements_)
            + ToString (_right_bracket_)
            + ToString (_else_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_if_ == child )
        {
            _keyword_if_ = null;
            return;
        }
        if ( _open_parent_ == child )
        {
            _open_parent_ = null;
            return;
        }
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _close_parent_ == child )
        {
            _close_parent_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
        if ( _else_statement_ == child )
        {
            _else_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_if_ == oldChild )
        {
            SetKeywordIf ((TKeywordIf) newChild);
            return;
        }
        if ( _open_parent_ == oldChild )
        {
            SetOpenParent ((TOpenParent) newChild);
            return;
        }
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _close_parent_ == oldChild )
        {
            SetCloseParent ((TCloseParent) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
        if ( _else_statement_ == oldChild )
        {
            SetElseStatement ((PElseStatement) newChild);
            return;
        }
    }

}
public sealed class AMultElseStatement : PElseStatement
{
    private TKeywordElse _keyword_else_;
    private TLeftBracket _left_bracket_;
    private PStatements _statements_;
    private TRightBracket _right_bracket_;

    public AMultElseStatement ()
    {
    }

    public AMultElseStatement (
            TKeywordElse _keyword_else_,
            TLeftBracket _left_bracket_,
            PStatements _statements_,
            TRightBracket _right_bracket_
    )
    {
        SetKeywordElse (_keyword_else_);
        SetLeftBracket (_left_bracket_);
        SetStatements (_statements_);
        SetRightBracket (_right_bracket_);
    }

    public override Object Clone()
    {
        return new AMultElseStatement (
            (TKeywordElse)CloneNode (_keyword_else_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (PStatements)CloneNode (_statements_),
            (TRightBracket)CloneNode (_right_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultElseStatement(this);
    }

    public TKeywordElse GetKeywordElse ()
    {
        return _keyword_else_;
    }

    public void SetKeywordElse (TKeywordElse node)
    {
        if(_keyword_else_ != null)
        {
            _keyword_else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_else_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_else_)
            + ToString (_left_bracket_)
            + ToString (_statements_)
            + ToString (_right_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_else_ == child )
        {
            _keyword_else_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_else_ == oldChild )
        {
            SetKeywordElse ((TKeywordElse) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
    }

}
public sealed class ANoneElseStatement : PElseStatement
{


    public ANoneElseStatement (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneElseStatement (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneElseStatement(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ALoopWhileStatement : PWhileStatement
{
    private TKeywordWhile _keyword_while_;
    private TLeftBracket _left_bracket_;
    private POrExpression _or_expression_;
    private TRightBracket _right_bracket_;
    private TEnd _first_;
    private PStatements _statements_;
    private TEnd _final_;

    public ALoopWhileStatement ()
    {
    }

    public ALoopWhileStatement (
            TKeywordWhile _keyword_while_,
            TLeftBracket _left_bracket_,
            POrExpression _or_expression_,
            TRightBracket _right_bracket_,
            TEnd _first_,
            PStatements _statements_,
            TEnd _final_
    )
    {
        SetKeywordWhile (_keyword_while_);
        SetLeftBracket (_left_bracket_);
        SetOrExpression (_or_expression_);
        SetRightBracket (_right_bracket_);
        SetFirst (_first_);
        SetStatements (_statements_);
        SetFinal (_final_);
    }

    public override Object Clone()
    {
        return new ALoopWhileStatement (
            (TKeywordWhile)CloneNode (_keyword_while_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (POrExpression)CloneNode (_or_expression_),
            (TRightBracket)CloneNode (_right_bracket_),
            (TEnd)CloneNode (_first_),
            (PStatements)CloneNode (_statements_),
            (TEnd)CloneNode (_final_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopWhileStatement(this);
    }

    public TKeywordWhile GetKeywordWhile ()
    {
        return _keyword_while_;
    }

    public void SetKeywordWhile (TKeywordWhile node)
    {
        if(_keyword_while_ != null)
        {
            _keyword_while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_while_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }
    public TEnd GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (TEnd node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TEnd GetFinal ()
    {
        return _final_;
    }

    public void SetFinal (TEnd node)
    {
        if(_final_ != null)
        {
            _final_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _final_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_while_)
            + ToString (_left_bracket_)
            + ToString (_or_expression_)
            + ToString (_right_bracket_)
            + ToString (_first_)
            + ToString (_statements_)
            + ToString (_final_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_while_ == child )
        {
            _keyword_while_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _final_ == child )
        {
            _final_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_while_ == oldChild )
        {
            SetKeywordWhile ((TKeywordWhile) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
        if ( _first_ == oldChild )
        {
            SetFirst ((TEnd) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _final_ == oldChild )
        {
            SetFinal ((TEnd) newChild);
            return;
        }
    }

}
public sealed class AConstantConstantDec : PConstantDec
{
    private TKeywordConstant _keyword_constant_;
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private POrExpression _or_expression_;
    private TEol _eol_;

    public AConstantConstantDec ()
    {
    }

    public AConstantConstantDec (
            TKeywordConstant _keyword_constant_,
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            POrExpression _or_expression_,
            TEol _eol_
    )
    {
        SetKeywordConstant (_keyword_constant_);
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetOrExpression (_or_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AConstantConstantDec (
            (TKeywordConstant)CloneNode (_keyword_constant_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (POrExpression)CloneNode (_or_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantConstantDec(this);
    }

    public TKeywordConstant GetKeywordConstant ()
    {
        return _keyword_constant_;
    }

    public void SetKeywordConstant (TKeywordConstant node)
    {
        if(_keyword_constant_ != null)
        {
            _keyword_constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_constant_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_constant_)
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_or_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_constant_ == child )
        {
            _keyword_constant_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_constant_ == oldChild )
        {
            SetKeywordConstant ((TKeywordConstant) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleFunctionDec : PFunctionDec
{
    private TKeywordFunction _keyword_function_;
    private TId _id_;
    private TOpenParent _open_parent_;
    private TString _string_;
    private TCloseParent _close_parent_;
    private TEnd _function_;
    private TDollar _dollar_;
    private PParameters _parameters_;
    private TEol _eol_;
    private PStatements _statements_;
    private TKeywordEnd _keyword_end_;
    private TEnd _param_;

    public AMultipleFunctionDec ()
    {
    }

    public AMultipleFunctionDec (
            TKeywordFunction _keyword_function_,
            TId _id_,
            TOpenParent _open_parent_,
            TString _string_,
            TCloseParent _close_parent_,
            TEnd _function_,
            TDollar _dollar_,
            PParameters _parameters_,
            TEol _eol_,
            PStatements _statements_,
            TKeywordEnd _keyword_end_,
            TEnd _param_
    )
    {
        SetKeywordFunction (_keyword_function_);
        SetId (_id_);
        SetOpenParent (_open_parent_);
        SetString (_string_);
        SetCloseParent (_close_parent_);
        SetFunction (_function_);
        SetDollar (_dollar_);
        SetParameters (_parameters_);
        SetEol (_eol_);
        SetStatements (_statements_);
        SetKeywordEnd (_keyword_end_);
        SetParam (_param_);
    }

    public override Object Clone()
    {
        return new AMultipleFunctionDec (
            (TKeywordFunction)CloneNode (_keyword_function_),
            (TId)CloneNode (_id_),
            (TOpenParent)CloneNode (_open_parent_),
            (TString)CloneNode (_string_),
            (TCloseParent)CloneNode (_close_parent_),
            (TEnd)CloneNode (_function_),
            (TDollar)CloneNode (_dollar_),
            (PParameters)CloneNode (_parameters_),
            (TEol)CloneNode (_eol_),
            (PStatements)CloneNode (_statements_),
            (TKeywordEnd)CloneNode (_keyword_end_),
            (TEnd)CloneNode (_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleFunctionDec(this);
    }

    public TKeywordFunction GetKeywordFunction ()
    {
        return _keyword_function_;
    }

    public void SetKeywordFunction (TKeywordFunction node)
    {
        if(_keyword_function_ != null)
        {
            _keyword_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParent GetOpenParent ()
    {
        return _open_parent_;
    }

    public void SetOpenParent (TOpenParent node)
    {
        if(_open_parent_ != null)
        {
            _open_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parent_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TCloseParent GetCloseParent ()
    {
        return _close_parent_;
    }

    public void SetCloseParent (TCloseParent node)
    {
        if(_close_parent_ != null)
        {
            _close_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parent_ = node;
    }
    public TEnd GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TEnd node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TDollar GetDollar ()
    {
        return _dollar_;
    }

    public void SetDollar (TDollar node)
    {
        if(_dollar_ != null)
        {
            _dollar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dollar_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TKeywordEnd GetKeywordEnd ()
    {
        return _keyword_end_;
    }

    public void SetKeywordEnd (TKeywordEnd node)
    {
        if(_keyword_end_ != null)
        {
            _keyword_end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_end_ = node;
    }
    public TEnd GetParam ()
    {
        return _param_;
    }

    public void SetParam (TEnd node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_function_)
            + ToString (_id_)
            + ToString (_open_parent_)
            + ToString (_string_)
            + ToString (_close_parent_)
            + ToString (_function_)
            + ToString (_dollar_)
            + ToString (_parameters_)
            + ToString (_eol_)
            + ToString (_statements_)
            + ToString (_keyword_end_)
            + ToString (_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_function_ == child )
        {
            _keyword_function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parent_ == child )
        {
            _open_parent_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _close_parent_ == child )
        {
            _close_parent_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _dollar_ == child )
        {
            _dollar_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _keyword_end_ == child )
        {
            _keyword_end_ = null;
            return;
        }
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_function_ == oldChild )
        {
            SetKeywordFunction ((TKeywordFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parent_ == oldChild )
        {
            SetOpenParent ((TOpenParent) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _close_parent_ == oldChild )
        {
            SetCloseParent ((TCloseParent) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((TEnd) newChild);
            return;
        }
        if ( _dollar_ == oldChild )
        {
            SetDollar ((TDollar) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _keyword_end_ == oldChild )
        {
            SetKeywordEnd ((TKeywordEnd) newChild);
            return;
        }
        if ( _param_ == oldChild )
        {
            SetParam ((TEnd) newChild);
            return;
        }
    }

}
public sealed class AMainMainProgram : PMainProgram
{
    private TKeywordStart _keyword_start_;
    private TEnd _start_;
    private TLeftBracket _left_bracket_;
    private PStatements _statements_;
    private TRightBracket _right_bracket_;
    private TKeywordEnd _keyword_end_;
    private TEnd _main_;

    public AMainMainProgram ()
    {
    }

    public AMainMainProgram (
            TKeywordStart _keyword_start_,
            TEnd _start_,
            TLeftBracket _left_bracket_,
            PStatements _statements_,
            TRightBracket _right_bracket_,
            TKeywordEnd _keyword_end_,
            TEnd _main_
    )
    {
        SetKeywordStart (_keyword_start_);
        SetStart (_start_);
        SetLeftBracket (_left_bracket_);
        SetStatements (_statements_);
        SetRightBracket (_right_bracket_);
        SetKeywordEnd (_keyword_end_);
        SetMain (_main_);
    }

    public override Object Clone()
    {
        return new AMainMainProgram (
            (TKeywordStart)CloneNode (_keyword_start_),
            (TEnd)CloneNode (_start_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (PStatements)CloneNode (_statements_),
            (TRightBracket)CloneNode (_right_bracket_),
            (TKeywordEnd)CloneNode (_keyword_end_),
            (TEnd)CloneNode (_main_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainMainProgram(this);
    }

    public TKeywordStart GetKeywordStart ()
    {
        return _keyword_start_;
    }

    public void SetKeywordStart (TKeywordStart node)
    {
        if(_keyword_start_ != null)
        {
            _keyword_start_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_start_ = node;
    }
    public TEnd GetStart ()
    {
        return _start_;
    }

    public void SetStart (TEnd node)
    {
        if(_start_ != null)
        {
            _start_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }
    public TKeywordEnd GetKeywordEnd ()
    {
        return _keyword_end_;
    }

    public void SetKeywordEnd (TKeywordEnd node)
    {
        if(_keyword_end_ != null)
        {
            _keyword_end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_end_ = node;
    }
    public TEnd GetMain ()
    {
        return _main_;
    }

    public void SetMain (TEnd node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_start_)
            + ToString (_start_)
            + ToString (_left_bracket_)
            + ToString (_statements_)
            + ToString (_right_bracket_)
            + ToString (_keyword_end_)
            + ToString (_main_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_start_ == child )
        {
            _keyword_start_ = null;
            return;
        }
        if ( _start_ == child )
        {
            _start_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
        if ( _keyword_end_ == child )
        {
            _keyword_end_ = null;
            return;
        }
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_start_ == oldChild )
        {
            SetKeywordStart ((TKeywordStart) newChild);
            return;
        }
        if ( _start_ == oldChild )
        {
            SetStart ((TEnd) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
        if ( _keyword_end_ == oldChild )
        {
            SetKeywordEnd ((TKeywordEnd) newChild);
            return;
        }
        if ( _main_ == oldChild )
        {
            SetMain ((TEnd) newChild);
            return;
        }
    }

}
public sealed class ANoneMainProgram : PMainProgram
{


    public ANoneMainProgram (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneMainProgram (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneMainProgram(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOrOrExpression : POrExpression
{
    private POrExpression _or_expression_;
    private TOr _or_;
    private PAndExpression _and_expression_;

    public AOrOrExpression ()
    {
    }

    public AOrOrExpression (
            POrExpression _or_expression_,
            TOr _or_,
            PAndExpression _and_expression_
    )
    {
        SetOrExpression (_or_expression_);
        SetOr (_or_);
        SetAndExpression (_and_expression_);
    }

    public override Object Clone()
    {
        return new AOrOrExpression (
            (POrExpression)CloneNode (_or_expression_),
            (TOr)CloneNode (_or_),
            (PAndExpression)CloneNode (_and_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrOrExpression(this);
    }

    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PAndExpression GetAndExpression ()
    {
        return _and_expression_;
    }

    public void SetAndExpression (PAndExpression node)
    {
        if(_and_expression_ != null)
        {
            _and_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_expression_)
            + ToString (_or_)
            + ToString (_and_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _and_expression_ == child )
        {
            _and_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _and_expression_ == oldChild )
        {
            SetAndExpression ((PAndExpression) newChild);
            return;
        }
    }

}
public sealed class APassOrExpression : POrExpression
{
    private PAndExpression _and_expression_;

    public APassOrExpression ()
    {
    }

    public APassOrExpression (
            PAndExpression _and_expression_
    )
    {
        SetAndExpression (_and_expression_);
    }

    public override Object Clone()
    {
        return new APassOrExpression (
            (PAndExpression)CloneNode (_and_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassOrExpression(this);
    }

    public PAndExpression GetAndExpression ()
    {
        return _and_expression_;
    }

    public void SetAndExpression (PAndExpression node)
    {
        if(_and_expression_ != null)
        {
            _and_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_expression_ == child )
        {
            _and_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_expression_ == oldChild )
        {
            SetAndExpression ((PAndExpression) newChild);
            return;
        }
    }

}
public sealed class AAndAndExpression : PAndExpression
{
    private PAndExpression _and_expression_;
    private TAnd _and_;
    private PEqualExpressions _equal_expressions_;

    public AAndAndExpression ()
    {
    }

    public AAndAndExpression (
            PAndExpression _and_expression_,
            TAnd _and_,
            PEqualExpressions _equal_expressions_
    )
    {
        SetAndExpression (_and_expression_);
        SetAnd (_and_);
        SetEqualExpressions (_equal_expressions_);
    }

    public override Object Clone()
    {
        return new AAndAndExpression (
            (PAndExpression)CloneNode (_and_expression_),
            (TAnd)CloneNode (_and_),
            (PEqualExpressions)CloneNode (_equal_expressions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndAndExpression(this);
    }

    public PAndExpression GetAndExpression ()
    {
        return _and_expression_;
    }

    public void SetAndExpression (PAndExpression node)
    {
        if(_and_expression_ != null)
        {
            _and_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_expression_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PEqualExpressions GetEqualExpressions ()
    {
        return _equal_expressions_;
    }

    public void SetEqualExpressions (PEqualExpressions node)
    {
        if(_equal_expressions_ != null)
        {
            _equal_expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_expressions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_expression_)
            + ToString (_and_)
            + ToString (_equal_expressions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_expression_ == child )
        {
            _and_expression_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _equal_expressions_ == child )
        {
            _equal_expressions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_expression_ == oldChild )
        {
            SetAndExpression ((PAndExpression) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _equal_expressions_ == oldChild )
        {
            SetEqualExpressions ((PEqualExpressions) newChild);
            return;
        }
    }

}
public sealed class APassAndExpression : PAndExpression
{
    private PEqualExpressions _equal_expressions_;

    public APassAndExpression ()
    {
    }

    public APassAndExpression (
            PEqualExpressions _equal_expressions_
    )
    {
        SetEqualExpressions (_equal_expressions_);
    }

    public override Object Clone()
    {
        return new APassAndExpression (
            (PEqualExpressions)CloneNode (_equal_expressions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassAndExpression(this);
    }

    public PEqualExpressions GetEqualExpressions ()
    {
        return _equal_expressions_;
    }

    public void SetEqualExpressions (PEqualExpressions node)
    {
        if(_equal_expressions_ != null)
        {
            _equal_expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_expressions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_expressions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_expressions_ == child )
        {
            _equal_expressions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_expressions_ == oldChild )
        {
            SetEqualExpressions ((PEqualExpressions) newChild);
            return;
        }
    }

}
public sealed class ALessEqualEqualExpressions : PEqualExpressions
{
    private PEqualExpressions _equal_expressions_;
    private TLessEqual _less_equal_;
    private PQuantityExpression _quantity_expression_;

    public ALessEqualEqualExpressions ()
    {
    }

    public ALessEqualEqualExpressions (
            PEqualExpressions _equal_expressions_,
            TLessEqual _less_equal_,
            PQuantityExpression _quantity_expression_
    )
    {
        SetEqualExpressions (_equal_expressions_);
        SetLessEqual (_less_equal_);
        SetQuantityExpression (_quantity_expression_);
    }

    public override Object Clone()
    {
        return new ALessEqualEqualExpressions (
            (PEqualExpressions)CloneNode (_equal_expressions_),
            (TLessEqual)CloneNode (_less_equal_),
            (PQuantityExpression)CloneNode (_quantity_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessEqualEqualExpressions(this);
    }

    public PEqualExpressions GetEqualExpressions ()
    {
        return _equal_expressions_;
    }

    public void SetEqualExpressions (PEqualExpressions node)
    {
        if(_equal_expressions_ != null)
        {
            _equal_expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_expressions_ = node;
    }
    public TLessEqual GetLessEqual ()
    {
        return _less_equal_;
    }

    public void SetLessEqual (TLessEqual node)
    {
        if(_less_equal_ != null)
        {
            _less_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_equal_ = node;
    }
    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_expressions_)
            + ToString (_less_equal_)
            + ToString (_quantity_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_expressions_ == child )
        {
            _equal_expressions_ = null;
            return;
        }
        if ( _less_equal_ == child )
        {
            _less_equal_ = null;
            return;
        }
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_expressions_ == oldChild )
        {
            SetEqualExpressions ((PEqualExpressions) newChild);
            return;
        }
        if ( _less_equal_ == oldChild )
        {
            SetLessEqual ((TLessEqual) newChild);
            return;
        }
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
    }

}
public sealed class AGreatEqualEqualExpressions : PEqualExpressions
{
    private PEqualExpressions _equal_expressions_;
    private TGreatEqual _great_equal_;
    private PQuantityExpression _quantity_expression_;

    public AGreatEqualEqualExpressions ()
    {
    }

    public AGreatEqualEqualExpressions (
            PEqualExpressions _equal_expressions_,
            TGreatEqual _great_equal_,
            PQuantityExpression _quantity_expression_
    )
    {
        SetEqualExpressions (_equal_expressions_);
        SetGreatEqual (_great_equal_);
        SetQuantityExpression (_quantity_expression_);
    }

    public override Object Clone()
    {
        return new AGreatEqualEqualExpressions (
            (PEqualExpressions)CloneNode (_equal_expressions_),
            (TGreatEqual)CloneNode (_great_equal_),
            (PQuantityExpression)CloneNode (_quantity_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatEqualEqualExpressions(this);
    }

    public PEqualExpressions GetEqualExpressions ()
    {
        return _equal_expressions_;
    }

    public void SetEqualExpressions (PEqualExpressions node)
    {
        if(_equal_expressions_ != null)
        {
            _equal_expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_expressions_ = node;
    }
    public TGreatEqual GetGreatEqual ()
    {
        return _great_equal_;
    }

    public void SetGreatEqual (TGreatEqual node)
    {
        if(_great_equal_ != null)
        {
            _great_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _great_equal_ = node;
    }
    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_expressions_)
            + ToString (_great_equal_)
            + ToString (_quantity_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_expressions_ == child )
        {
            _equal_expressions_ = null;
            return;
        }
        if ( _great_equal_ == child )
        {
            _great_equal_ = null;
            return;
        }
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_expressions_ == oldChild )
        {
            SetEqualExpressions ((PEqualExpressions) newChild);
            return;
        }
        if ( _great_equal_ == oldChild )
        {
            SetGreatEqual ((TGreatEqual) newChild);
            return;
        }
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
    }

}
public sealed class ANotEquivEqualExpressions : PEqualExpressions
{
    private PEqualExpressions _equal_expressions_;
    private TNotEquiv _not_equiv_;
    private PQuantityExpression _quantity_expression_;

    public ANotEquivEqualExpressions ()
    {
    }

    public ANotEquivEqualExpressions (
            PEqualExpressions _equal_expressions_,
            TNotEquiv _not_equiv_,
            PQuantityExpression _quantity_expression_
    )
    {
        SetEqualExpressions (_equal_expressions_);
        SetNotEquiv (_not_equiv_);
        SetQuantityExpression (_quantity_expression_);
    }

    public override Object Clone()
    {
        return new ANotEquivEqualExpressions (
            (PEqualExpressions)CloneNode (_equal_expressions_),
            (TNotEquiv)CloneNode (_not_equiv_),
            (PQuantityExpression)CloneNode (_quantity_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEquivEqualExpressions(this);
    }

    public PEqualExpressions GetEqualExpressions ()
    {
        return _equal_expressions_;
    }

    public void SetEqualExpressions (PEqualExpressions node)
    {
        if(_equal_expressions_ != null)
        {
            _equal_expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_expressions_ = node;
    }
    public TNotEquiv GetNotEquiv ()
    {
        return _not_equiv_;
    }

    public void SetNotEquiv (TNotEquiv node)
    {
        if(_not_equiv_ != null)
        {
            _not_equiv_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equiv_ = node;
    }
    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_expressions_)
            + ToString (_not_equiv_)
            + ToString (_quantity_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_expressions_ == child )
        {
            _equal_expressions_ = null;
            return;
        }
        if ( _not_equiv_ == child )
        {
            _not_equiv_ = null;
            return;
        }
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_expressions_ == oldChild )
        {
            SetEqualExpressions ((PEqualExpressions) newChild);
            return;
        }
        if ( _not_equiv_ == oldChild )
        {
            SetNotEquiv ((TNotEquiv) newChild);
            return;
        }
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
    }

}
public sealed class AEquivEqualExpressions : PEqualExpressions
{
    private PEqualExpressions _equal_expressions_;
    private TEquiv _equiv_;
    private PQuantityExpression _quantity_expression_;

    public AEquivEqualExpressions ()
    {
    }

    public AEquivEqualExpressions (
            PEqualExpressions _equal_expressions_,
            TEquiv _equiv_,
            PQuantityExpression _quantity_expression_
    )
    {
        SetEqualExpressions (_equal_expressions_);
        SetEquiv (_equiv_);
        SetQuantityExpression (_quantity_expression_);
    }

    public override Object Clone()
    {
        return new AEquivEqualExpressions (
            (PEqualExpressions)CloneNode (_equal_expressions_),
            (TEquiv)CloneNode (_equiv_),
            (PQuantityExpression)CloneNode (_quantity_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEquivEqualExpressions(this);
    }

    public PEqualExpressions GetEqualExpressions ()
    {
        return _equal_expressions_;
    }

    public void SetEqualExpressions (PEqualExpressions node)
    {
        if(_equal_expressions_ != null)
        {
            _equal_expressions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_expressions_ = node;
    }
    public TEquiv GetEquiv ()
    {
        return _equiv_;
    }

    public void SetEquiv (TEquiv node)
    {
        if(_equiv_ != null)
        {
            _equiv_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equiv_ = node;
    }
    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_expressions_)
            + ToString (_equiv_)
            + ToString (_quantity_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_expressions_ == child )
        {
            _equal_expressions_ = null;
            return;
        }
        if ( _equiv_ == child )
        {
            _equiv_ = null;
            return;
        }
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_expressions_ == oldChild )
        {
            SetEqualExpressions ((PEqualExpressions) newChild);
            return;
        }
        if ( _equiv_ == oldChild )
        {
            SetEquiv ((TEquiv) newChild);
            return;
        }
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
    }

}
public sealed class APassEqualExpressions : PEqualExpressions
{
    private PQuantityExpression _quantity_expression_;

    public APassEqualExpressions ()
    {
    }

    public APassEqualExpressions (
            PQuantityExpression _quantity_expression_
    )
    {
        SetQuantityExpression (_quantity_expression_);
    }

    public override Object Clone()
    {
        return new APassEqualExpressions (
            (PQuantityExpression)CloneNode (_quantity_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassEqualExpressions(this);
    }

    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_quantity_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
    }

}
public sealed class AGreaterQuantityExpression : PQuantityExpression
{
    private PQuantityExpression _quantity_expression_;
    private TGreater _greater_;
    private PExpression _expression_;

    public AGreaterQuantityExpression ()
    {
    }

    public AGreaterQuantityExpression (
            PQuantityExpression _quantity_expression_,
            TGreater _greater_,
            PExpression _expression_
    )
    {
        SetQuantityExpression (_quantity_expression_);
        SetGreater (_greater_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AGreaterQuantityExpression (
            (PQuantityExpression)CloneNode (_quantity_expression_),
            (TGreater)CloneNode (_greater_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterQuantityExpression(this);
    }

    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }
    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_quantity_expression_)
            + ToString (_greater_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ALessQuantityExpression : PQuantityExpression
{
    private PQuantityExpression _quantity_expression_;
    private TLess _less_;
    private PExpression _expression_;

    public ALessQuantityExpression ()
    {
    }

    public ALessQuantityExpression (
            PQuantityExpression _quantity_expression_,
            TLess _less_,
            PExpression _expression_
    )
    {
        SetQuantityExpression (_quantity_expression_);
        SetLess (_less_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ALessQuantityExpression (
            (PQuantityExpression)CloneNode (_quantity_expression_),
            (TLess)CloneNode (_less_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessQuantityExpression(this);
    }

    public PQuantityExpression GetQuantityExpression ()
    {
        return _quantity_expression_;
    }

    public void SetQuantityExpression (PQuantityExpression node)
    {
        if(_quantity_expression_ != null)
        {
            _quantity_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _quantity_expression_ = node;
    }
    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_quantity_expression_)
            + ToString (_less_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _quantity_expression_ == child )
        {
            _quantity_expression_ = null;
            return;
        }
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _quantity_expression_ == oldChild )
        {
            SetQuantityExpression ((PQuantityExpression) newChild);
            return;
        }
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class APassQuantityExpression : PQuantityExpression
{
    private PExpression _expression_;

    public APassQuantityExpression ()
    {
    }

    public APassQuantityExpression (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new APassQuantityExpression (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassQuantityExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AMultExpression : PExpression
{
    private PExpression _expression_;
    private TMult _mult_;
    private PExpression2 _expression2_;

    public AMultExpression ()
    {
    }

    public AMultExpression (
            PExpression _expression_,
            TMult _mult_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetMult (_mult_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AMultExpression (
            (PExpression)CloneNode (_expression_),
            (TMult)CloneNode (_mult_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_mult_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ADivExpression : PExpression
{
    private PExpression _expression_;
    private TDiv _div_;
    private PExpression2 _expression2_;

    public ADivExpression ()
    {
    }

    public ADivExpression (
            PExpression _expression_,
            TDiv _div_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetDiv (_div_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new ADivExpression (
            (PExpression)CloneNode (_expression_),
            (TDiv)CloneNode (_div_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TDiv GetDiv ()
    {
        return _div_;
    }

    public void SetDiv (TDiv node)
    {
        if(_div_ != null)
        {
            _div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _div_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_div_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _div_ == child )
        {
            _div_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _div_ == oldChild )
        {
            SetDiv ((TDiv) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AAddExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TPlus _plus_;
    private PExpression3 _expression3_;

    public AAddExpression2 ()
    {
    }

    public AAddExpression2 (
            PExpression2 _expression2_,
            TPlus _plus_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetPlus (_plus_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AAddExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TPlus)CloneNode (_plus_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_plus_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AMinusExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TMinus _minus_;
    private PExpression3 _expression3_;

    public AMinusExpression2 ()
    {
    }

    public AMinusExpression2 (
            PExpression2 _expression2_,
            TMinus _minus_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetMinus (_minus_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AMinusExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TMinus)CloneNode (_minus_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_minus_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ANegExpression3 : PExpression3
{
    private TMinus _minus_;
    private PExpression3 _expression3_;

    public ANegExpression3 ()
    {
    }

    public ANegExpression3 (
            TMinus _minus_,
            PExpression3 _expression3_
    )
    {
        SetMinus (_minus_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ANegExpression3 (
            (TMinus)CloneNode (_minus_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegExpression3(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ANotExpression3 : PExpression3
{
    private TNot _not_;
    private PExpression3 _expression3_;

    public ANotExpression3 ()
    {
    }

    public ANotExpression3 (
            TNot _not_,
            PExpression3 _expression3_
    )
    {
        SetNot (_not_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ANotExpression3 (
            (TNot)CloneNode (_not_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotExpression3(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AExpression4 : PExpression4
{
    private TOpenParent _open_parent_;
    private POrExpression _or_expression_;
    private TCloseParent _close_parent_;

    public AExpression4 ()
    {
    }

    public AExpression4 (
            TOpenParent _open_parent_,
            POrExpression _or_expression_,
            TCloseParent _close_parent_
    )
    {
        SetOpenParent (_open_parent_);
        SetOrExpression (_or_expression_);
        SetCloseParent (_close_parent_);
    }

    public override Object Clone()
    {
        return new AExpression4 (
            (TOpenParent)CloneNode (_open_parent_),
            (POrExpression)CloneNode (_or_expression_),
            (TCloseParent)CloneNode (_close_parent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpression4(this);
    }

    public TOpenParent GetOpenParent ()
    {
        return _open_parent_;
    }

    public void SetOpenParent (TOpenParent node)
    {
        if(_open_parent_ != null)
        {
            _open_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parent_ = node;
    }
    public POrExpression GetOrExpression ()
    {
        return _or_expression_;
    }

    public void SetOrExpression (POrExpression node)
    {
        if(_or_expression_ != null)
        {
            _or_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_expression_ = node;
    }
    public TCloseParent GetCloseParent ()
    {
        return _close_parent_;
    }

    public void SetCloseParent (TCloseParent node)
    {
        if(_close_parent_ != null)
        {
            _close_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_open_parent_)
            + ToString (_or_expression_)
            + ToString (_close_parent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _open_parent_ == child )
        {
            _open_parent_ = null;
            return;
        }
        if ( _or_expression_ == child )
        {
            _or_expression_ = null;
            return;
        }
        if ( _close_parent_ == child )
        {
            _close_parent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _open_parent_ == oldChild )
        {
            SetOpenParent ((TOpenParent) newChild);
            return;
        }
        if ( _or_expression_ == oldChild )
        {
            SetOrExpression ((POrExpression) newChild);
            return;
        }
        if ( _close_parent_ == oldChild )
        {
            SetCloseParent ((TCloseParent) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private POperand _operand_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloat _float_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
