/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAConstantProgram(AConstantProgram node);
    void CaseAPassProgram(APassProgram node);
    void CaseAMultipleProgram2(AMultipleProgram2 node);
    void CaseAPassProgram2(APassProgram2 node);
    void CaseAMainProgram3(AMainProgram3 node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseANoneStatements(ANoneStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseAConditionalStatement(AConditionalStatement node);
    void CaseALoopStatement(ALoopStatement node);
    void CaseAMultipleArguments(AMultipleArguments node);
    void CaseASingleArguments(ASingleArguments node);
    void CaseANoneArguments(ANoneArguments node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseANoneParameters(ANoneParameters node);
    void CaseADeclarationDeclareStatement(ADeclarationDeclareStatement node);
    void CaseACallFunctionCallStatement(ACallFunctionCallStatement node);
    void CaseAAssignmentAssignStatement(AAssignmentAssignStatement node);
    void CaseAConditionalIfStatement(AConditionalIfStatement node);
    void CaseAMultElseStatement(AMultElseStatement node);
    void CaseANoneElseStatement(ANoneElseStatement node);
    void CaseALoopWhileStatement(ALoopWhileStatement node);
    void CaseAConstantConstantDec(AConstantConstantDec node);
    void CaseAMultipleFunctionDec(AMultipleFunctionDec node);
    void CaseAMainMainProgram(AMainMainProgram node);
    void CaseANoneMainProgram(ANoneMainProgram node);
    void CaseAOrOrExpression(AOrOrExpression node);
    void CaseAPassOrExpression(APassOrExpression node);
    void CaseAAndAndExpression(AAndAndExpression node);
    void CaseAPassAndExpression(APassAndExpression node);
    void CaseALessEqualEqualExpressions(ALessEqualEqualExpressions node);
    void CaseAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node);
    void CaseANotEquivEqualExpressions(ANotEquivEqualExpressions node);
    void CaseAEquivEqualExpressions(AEquivEqualExpressions node);
    void CaseAPassEqualExpressions(APassEqualExpressions node);
    void CaseAGreaterQuantityExpression(AGreaterQuantityExpression node);
    void CaseALessQuantityExpression(ALessQuantityExpression node);
    void CaseAPassQuantityExpression(APassQuantityExpression node);
    void CaseAMultExpression(AMultExpression node);
    void CaseADivExpression(ADivExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAAddExpression2(AAddExpression2 node);
    void CaseAMinusExpression2(AMinusExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseANegExpression3(ANegExpression3 node);
    void CaseANotExpression3(ANotExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseAExpression4(AExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAStringOperand(AStringOperand node);
    void CaseAVariableOperand(AVariableOperand node);

    void CaseTKeywordWhile(TKeywordWhile node);
    void CaseTKeywordLoop(TKeywordLoop node);
    void CaseTKeywordConstant(TKeywordConstant node);
    void CaseTKeywordStart(TKeywordStart node);
    void CaseTKeywordEnd(TKeywordEnd node);
    void CaseTKeywordIf(TKeywordIf node);
    void CaseTKeywordElse(TKeywordElse node);
    void CaseTKeywordFunction(TKeywordFunction node);
    void CaseTKeywordThen(TKeywordThen node);
    void CaseTEol(TEol node);
    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTDiv(TDiv node);
    void CaseTMinus(TMinus node);
    void CaseTEquiv(TEquiv node);
    void CaseTNotEquiv(TNotEquiv node);
    void CaseTGreater(TGreater node);
    void CaseTGreatEqual(TGreatEqual node);
    void CaseTLess(TLess node);
    void CaseTLessEqual(TLessEqual node);
    void CaseTSlash(TSlash node);
    void CaseTOr(TOr node);
    void CaseTEnd(TEnd node);
    void CaseTIncrement(TIncrement node);
    void CaseTDecrement(TDecrement node);
    void CaseTNot(TNot node);
    void CaseTComma(TComma node);
    void CaseTSingQuote(TSingQuote node);
    void CaseTLeftBracket(TLeftBracket node);
    void CaseTRightBracket(TRightBracket node);
    void CaseTOpenParent(TOpenParent node);
    void CaseTCloseParent(TCloseParent node);
    void CaseTDollar(TDollar node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTAnd(TAnd node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAConstantProgram(AConstantProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassProgram(APassProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleProgram2(AMultipleProgram2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassProgram2(APassProgram2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainProgram3(AMainProgram3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneStatements(ANoneStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConditionalStatement(AConditionalStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoopStatement(ALoopStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleArguments(AMultipleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleArguments(ASingleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneArguments(ANoneArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParameters(ANoneParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConditionalIfStatement(AConditionalIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultElseStatement(AMultElseStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneElseStatement(ANoneElseStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoopWhileStatement(ALoopWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantConstantDec(AConstantConstantDec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainMainProgram(AMainMainProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneMainProgram(ANoneMainProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrOrExpression(AOrOrExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassOrExpression(APassOrExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndAndExpression(AAndAndExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassAndExpression(APassAndExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassEqualExpressions(APassEqualExpressions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessQuantityExpression(ALessQuantityExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassQuantityExpression(APassQuantityExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExpression(AMultExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivExpression(ADivExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression2(AAddExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusExpression2(AMinusExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegExpression3(ANegExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotExpression3(ANotExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpression4(AExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTKeywordWhile(TKeywordWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordLoop(TKeywordLoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordConstant(TKeywordConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordStart(TKeywordStart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordEnd(TKeywordEnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordIf(TKeywordIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordElse(TKeywordElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordFunction(TKeywordFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordThen(TKeywordThen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquiv(TEquiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEquiv(TNotEquiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreatEqual(TGreatEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqual(TLessEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSlash(TSlash node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEnd(TEnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIncrement(TIncrement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDecrement(TDecrement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSingQuote(TSingQuote node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftBracket(TLeftBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightBracket(TRightBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenParent(TOpenParent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseParent(TCloseParent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDollar(TDollar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAConstantProgram(AConstantProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantProgram(AConstantProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantProgram(AConstantProgram node)
    {
        InAConstantProgram(node);
        if(node.GetConstantDec() != null)
        {
            node.GetConstantDec().Apply(this);
        }
        if(node.GetProgram() != null)
        {
            node.GetProgram().Apply(this);
        }
        OutAConstantProgram(node);
    }
    public virtual void InAPassProgram(APassProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassProgram(APassProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassProgram(APassProgram node)
    {
        InAPassProgram(node);
        if(node.GetProgram2() != null)
        {
            node.GetProgram2().Apply(this);
        }
        OutAPassProgram(node);
    }
    public virtual void InAMultipleProgram2(AMultipleProgram2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleProgram2(AMultipleProgram2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleProgram2(AMultipleProgram2 node)
    {
        InAMultipleProgram2(node);
        if(node.GetFunctionDec() != null)
        {
            node.GetFunctionDec().Apply(this);
        }
        if(node.GetProgram2() != null)
        {
            node.GetProgram2().Apply(this);
        }
        OutAMultipleProgram2(node);
    }
    public virtual void InAPassProgram2(APassProgram2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassProgram2(APassProgram2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassProgram2(APassProgram2 node)
    {
        InAPassProgram2(node);
        if(node.GetProgram3() != null)
        {
            node.GetProgram3().Apply(this);
        }
        OutAPassProgram2(node);
    }
    public virtual void InAMainProgram3(AMainProgram3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainProgram3(AMainProgram3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainProgram3(AMainProgram3 node)
    {
        InAMainProgram3(node);
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        OutAMainProgram3(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InANoneStatements(ANoneStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStatements(ANoneStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStatements(ANoneStatements node)
    {
        InANoneStatements(node);
        OutANoneStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InAConditionalStatement(AConditionalStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionalStatement(AConditionalStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionalStatement(AConditionalStatement node)
    {
        InAConditionalStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAConditionalStatement(node);
    }
    public virtual void InALoopStatement(ALoopStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStatement(ALoopStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStatement(ALoopStatement node)
    {
        InALoopStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutALoopStatement(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InASingleArguments(ASingleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleArguments(ASingleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleArguments(ASingleArguments node)
    {
        InASingleArguments(node);
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        OutASingleArguments(node);
    }
    public virtual void InANoneArguments(ANoneArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArguments(ANoneArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArguments(ANoneArguments node)
    {
        InANoneArguments(node);
        OutANoneArguments(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        InADeclarationDeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclarationDeclareStatement(node);
    }
    public virtual void InACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        InACallFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutACallFunctionCallStatement(node);
    }
    public virtual void InAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        InAAssignmentAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignmentAssignStatement(node);
    }
    public virtual void InAConditionalIfStatement(AConditionalIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionalIfStatement(AConditionalIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionalIfStatement(AConditionalIfStatement node)
    {
        InAConditionalIfStatement(node);
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetElseStatement() != null)
        {
            node.GetElseStatement().Apply(this);
        }
        OutAConditionalIfStatement(node);
    }
    public virtual void InAMultElseStatement(AMultElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultElseStatement(AMultElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultElseStatement(AMultElseStatement node)
    {
        InAMultElseStatement(node);
        if(node.GetKeywordElse() != null)
        {
            node.GetKeywordElse().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        OutAMultElseStatement(node);
    }
    public virtual void InANoneElseStatement(ANoneElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneElseStatement(ANoneElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneElseStatement(ANoneElseStatement node)
    {
        InANoneElseStatement(node);
        OutANoneElseStatement(node);
    }
    public virtual void InALoopWhileStatement(ALoopWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopWhileStatement(ALoopWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopWhileStatement(ALoopWhileStatement node)
    {
        InALoopWhileStatement(node);
        if(node.GetKeywordWhile() != null)
        {
            node.GetKeywordWhile().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetFinal() != null)
        {
            node.GetFinal().Apply(this);
        }
        OutALoopWhileStatement(node);
    }
    public virtual void InAConstantConstantDec(AConstantConstantDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantConstantDec(AConstantConstantDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantConstantDec(AConstantConstantDec node)
    {
        InAConstantConstantDec(node);
        if(node.GetKeywordConstant() != null)
        {
            node.GetKeywordConstant().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstantConstantDec(node);
    }
    public virtual void InAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        InAMultipleFunctionDec(node);
        if(node.GetKeywordFunction() != null)
        {
            node.GetKeywordFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetDollar() != null)
        {
            node.GetDollar().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetKeywordEnd() != null)
        {
            node.GetKeywordEnd().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAMultipleFunctionDec(node);
    }
    public virtual void InAMainMainProgram(AMainMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMainProgram(AMainMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMainProgram(AMainMainProgram node)
    {
        InAMainMainProgram(node);
        if(node.GetKeywordStart() != null)
        {
            node.GetKeywordStart().Apply(this);
        }
        if(node.GetStart() != null)
        {
            node.GetStart().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetKeywordEnd() != null)
        {
            node.GetKeywordEnd().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainMainProgram(node);
    }
    public virtual void InANoneMainProgram(ANoneMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMainProgram(ANoneMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMainProgram(ANoneMainProgram node)
    {
        InANoneMainProgram(node);
        OutANoneMainProgram(node);
    }
    public virtual void InAOrOrExpression(AOrOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrOrExpression(AOrOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrOrExpression(AOrOrExpression node)
    {
        InAOrOrExpression(node);
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetAndExpression() != null)
        {
            node.GetAndExpression().Apply(this);
        }
        OutAOrOrExpression(node);
    }
    public virtual void InAPassOrExpression(APassOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOrExpression(APassOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOrExpression(APassOrExpression node)
    {
        InAPassOrExpression(node);
        if(node.GetAndExpression() != null)
        {
            node.GetAndExpression().Apply(this);
        }
        OutAPassOrExpression(node);
    }
    public virtual void InAAndAndExpression(AAndAndExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndAndExpression(AAndAndExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndAndExpression(AAndAndExpression node)
    {
        InAAndAndExpression(node);
        if(node.GetAndExpression() != null)
        {
            node.GetAndExpression().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutAAndAndExpression(node);
    }
    public virtual void InAPassAndExpression(APassAndExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAndExpression(APassAndExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAndExpression(APassAndExpression node)
    {
        InAPassAndExpression(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutAPassAndExpression(node);
    }
    public virtual void InALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        InALessEqualEqualExpressions(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutALessEqualEqualExpressions(node);
    }
    public virtual void InAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        InAGreatEqualEqualExpressions(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        if(node.GetGreatEqual() != null)
        {
            node.GetGreatEqual().Apply(this);
        }
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutAGreatEqualEqualExpressions(node);
    }
    public virtual void InANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        InANotEquivEqualExpressions(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        if(node.GetNotEquiv() != null)
        {
            node.GetNotEquiv().Apply(this);
        }
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutANotEquivEqualExpressions(node);
    }
    public virtual void InAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        InAEquivEqualExpressions(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        if(node.GetEquiv() != null)
        {
            node.GetEquiv().Apply(this);
        }
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutAEquivEqualExpressions(node);
    }
    public virtual void InAPassEqualExpressions(APassEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassEqualExpressions(APassEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassEqualExpressions(APassEqualExpressions node)
    {
        InAPassEqualExpressions(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutAPassEqualExpressions(node);
    }
    public virtual void InAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        InAGreaterQuantityExpression(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAGreaterQuantityExpression(node);
    }
    public virtual void InALessQuantityExpression(ALessQuantityExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessQuantityExpression(ALessQuantityExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALessQuantityExpression(ALessQuantityExpression node)
    {
        InALessQuantityExpression(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutALessQuantityExpression(node);
    }
    public virtual void InAPassQuantityExpression(APassQuantityExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassQuantityExpression(APassQuantityExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassQuantityExpression(APassQuantityExpression node)
    {
        InAPassQuantityExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAPassQuantityExpression(node);
    }
    public virtual void InAMultExpression(AMultExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpression(AMultExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpression(AMultExpression node)
    {
        InAMultExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAMultExpression(node);
    }
    public virtual void InADivExpression(ADivExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivExpression(ADivExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADivExpression(ADivExpression node)
    {
        InADivExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutADivExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAddExpression2(AAddExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression2(AAddExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression2(AAddExpression2 node)
    {
        InAAddExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAAddExpression2(node);
    }
    public virtual void InAMinusExpression2(AMinusExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpression2(AMinusExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpression2(AMinusExpression2 node)
    {
        InAMinusExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMinusExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InANegExpression3(ANegExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegExpression3(ANegExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegExpression3(ANegExpression3 node)
    {
        InANegExpression3(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutANegExpression3(node);
    }
    public virtual void InANotExpression3(ANotExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpression3(ANotExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpression3(ANotExpression3 node)
    {
        InANotExpression3(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutANotExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAExpression4(AExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpression4(AExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpression4(AExpression4 node)
    {
        InAExpression4(node);
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        OutAExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAConstantProgram(AConstantProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantProgram(AConstantProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantProgram(AConstantProgram node)
    {
        InAConstantProgram(node);
        if(node.GetProgram() != null)
        {
            node.GetProgram().Apply(this);
        }
        if(node.GetConstantDec() != null)
        {
            node.GetConstantDec().Apply(this);
        }
        OutAConstantProgram(node);
    }
    public virtual void InAPassProgram(APassProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassProgram(APassProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassProgram(APassProgram node)
    {
        InAPassProgram(node);
        if(node.GetProgram2() != null)
        {
            node.GetProgram2().Apply(this);
        }
        OutAPassProgram(node);
    }
    public virtual void InAMultipleProgram2(AMultipleProgram2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleProgram2(AMultipleProgram2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleProgram2(AMultipleProgram2 node)
    {
        InAMultipleProgram2(node);
        if(node.GetProgram2() != null)
        {
            node.GetProgram2().Apply(this);
        }
        if(node.GetFunctionDec() != null)
        {
            node.GetFunctionDec().Apply(this);
        }
        OutAMultipleProgram2(node);
    }
    public virtual void InAPassProgram2(APassProgram2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassProgram2(APassProgram2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassProgram2(APassProgram2 node)
    {
        InAPassProgram2(node);
        if(node.GetProgram3() != null)
        {
            node.GetProgram3().Apply(this);
        }
        OutAPassProgram2(node);
    }
    public virtual void InAMainProgram3(AMainProgram3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainProgram3(AMainProgram3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainProgram3(AMainProgram3 node)
    {
        InAMainProgram3(node);
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        OutAMainProgram3(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InANoneStatements(ANoneStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStatements(ANoneStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStatements(ANoneStatements node)
    {
        InANoneStatements(node);
        OutANoneStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InAConditionalStatement(AConditionalStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionalStatement(AConditionalStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionalStatement(AConditionalStatement node)
    {
        InAConditionalStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAConditionalStatement(node);
    }
    public virtual void InALoopStatement(ALoopStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStatement(ALoopStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStatement(ALoopStatement node)
    {
        InALoopStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutALoopStatement(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InASingleArguments(ASingleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleArguments(ASingleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleArguments(ASingleArguments node)
    {
        InASingleArguments(node);
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        OutASingleArguments(node);
    }
    public virtual void InANoneArguments(ANoneArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArguments(ANoneArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArguments(ANoneArguments node)
    {
        InANoneArguments(node);
        OutANoneArguments(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationDeclareStatement(ADeclarationDeclareStatement node)
    {
        InADeclarationDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclarationDeclareStatement(node);
    }
    public virtual void InACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallFunctionCallStatement(ACallFunctionCallStatement node)
    {
        InACallFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutACallFunctionCallStatement(node);
    }
    public virtual void InAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentAssignStatement(AAssignmentAssignStatement node)
    {
        InAAssignmentAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignmentAssignStatement(node);
    }
    public virtual void InAConditionalIfStatement(AConditionalIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionalIfStatement(AConditionalIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionalIfStatement(AConditionalIfStatement node)
    {
        InAConditionalIfStatement(node);
        if(node.GetElseStatement() != null)
        {
            node.GetElseStatement().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        OutAConditionalIfStatement(node);
    }
    public virtual void InAMultElseStatement(AMultElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultElseStatement(AMultElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultElseStatement(AMultElseStatement node)
    {
        InAMultElseStatement(node);
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetKeywordElse() != null)
        {
            node.GetKeywordElse().Apply(this);
        }
        OutAMultElseStatement(node);
    }
    public virtual void InANoneElseStatement(ANoneElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneElseStatement(ANoneElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneElseStatement(ANoneElseStatement node)
    {
        InANoneElseStatement(node);
        OutANoneElseStatement(node);
    }
    public virtual void InALoopWhileStatement(ALoopWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopWhileStatement(ALoopWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopWhileStatement(ALoopWhileStatement node)
    {
        InALoopWhileStatement(node);
        if(node.GetFinal() != null)
        {
            node.GetFinal().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetKeywordWhile() != null)
        {
            node.GetKeywordWhile().Apply(this);
        }
        OutALoopWhileStatement(node);
    }
    public virtual void InAConstantConstantDec(AConstantConstantDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantConstantDec(AConstantConstantDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantConstantDec(AConstantConstantDec node)
    {
        InAConstantConstantDec(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetKeywordConstant() != null)
        {
            node.GetKeywordConstant().Apply(this);
        }
        OutAConstantConstantDec(node);
    }
    public virtual void InAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionDec(AMultipleFunctionDec node)
    {
        InAMultipleFunctionDec(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetKeywordEnd() != null)
        {
            node.GetKeywordEnd().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetDollar() != null)
        {
            node.GetDollar().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeywordFunction() != null)
        {
            node.GetKeywordFunction().Apply(this);
        }
        OutAMultipleFunctionDec(node);
    }
    public virtual void InAMainMainProgram(AMainMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMainProgram(AMainMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMainProgram(AMainMainProgram node)
    {
        InAMainMainProgram(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetKeywordEnd() != null)
        {
            node.GetKeywordEnd().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetStart() != null)
        {
            node.GetStart().Apply(this);
        }
        if(node.GetKeywordStart() != null)
        {
            node.GetKeywordStart().Apply(this);
        }
        OutAMainMainProgram(node);
    }
    public virtual void InANoneMainProgram(ANoneMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMainProgram(ANoneMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMainProgram(ANoneMainProgram node)
    {
        InANoneMainProgram(node);
        OutANoneMainProgram(node);
    }
    public virtual void InAOrOrExpression(AOrOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrOrExpression(AOrOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrOrExpression(AOrOrExpression node)
    {
        InAOrOrExpression(node);
        if(node.GetAndExpression() != null)
        {
            node.GetAndExpression().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        OutAOrOrExpression(node);
    }
    public virtual void InAPassOrExpression(APassOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOrExpression(APassOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOrExpression(APassOrExpression node)
    {
        InAPassOrExpression(node);
        if(node.GetAndExpression() != null)
        {
            node.GetAndExpression().Apply(this);
        }
        OutAPassOrExpression(node);
    }
    public virtual void InAAndAndExpression(AAndAndExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndAndExpression(AAndAndExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndAndExpression(AAndAndExpression node)
    {
        InAAndAndExpression(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetAndExpression() != null)
        {
            node.GetAndExpression().Apply(this);
        }
        OutAAndAndExpression(node);
    }
    public virtual void InAPassAndExpression(APassAndExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAndExpression(APassAndExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAndExpression(APassAndExpression node)
    {
        InAPassAndExpression(node);
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutAPassAndExpression(node);
    }
    public virtual void InALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualEqualExpressions(ALessEqualEqualExpressions node)
    {
        InALessEqualEqualExpressions(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutALessEqualEqualExpressions(node);
    }
    public virtual void InAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatEqualEqualExpressions(AGreatEqualEqualExpressions node)
    {
        InAGreatEqualEqualExpressions(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        if(node.GetGreatEqual() != null)
        {
            node.GetGreatEqual().Apply(this);
        }
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutAGreatEqualEqualExpressions(node);
    }
    public virtual void InANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEquivEqualExpressions(ANotEquivEqualExpressions node)
    {
        InANotEquivEqualExpressions(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        if(node.GetNotEquiv() != null)
        {
            node.GetNotEquiv().Apply(this);
        }
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutANotEquivEqualExpressions(node);
    }
    public virtual void InAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivEqualExpressions(AEquivEqualExpressions node)
    {
        InAEquivEqualExpressions(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        if(node.GetEquiv() != null)
        {
            node.GetEquiv().Apply(this);
        }
        if(node.GetEqualExpressions() != null)
        {
            node.GetEqualExpressions().Apply(this);
        }
        OutAEquivEqualExpressions(node);
    }
    public virtual void InAPassEqualExpressions(APassEqualExpressions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassEqualExpressions(APassEqualExpressions node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassEqualExpressions(APassEqualExpressions node)
    {
        InAPassEqualExpressions(node);
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutAPassEqualExpressions(node);
    }
    public virtual void InAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterQuantityExpression(AGreaterQuantityExpression node)
    {
        InAGreaterQuantityExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutAGreaterQuantityExpression(node);
    }
    public virtual void InALessQuantityExpression(ALessQuantityExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessQuantityExpression(ALessQuantityExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALessQuantityExpression(ALessQuantityExpression node)
    {
        InALessQuantityExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetQuantityExpression() != null)
        {
            node.GetQuantityExpression().Apply(this);
        }
        OutALessQuantityExpression(node);
    }
    public virtual void InAPassQuantityExpression(APassQuantityExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassQuantityExpression(APassQuantityExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassQuantityExpression(APassQuantityExpression node)
    {
        InAPassQuantityExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAPassQuantityExpression(node);
    }
    public virtual void InAMultExpression(AMultExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpression(AMultExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpression(AMultExpression node)
    {
        InAMultExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMultExpression(node);
    }
    public virtual void InADivExpression(ADivExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivExpression(ADivExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseADivExpression(ADivExpression node)
    {
        InADivExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutADivExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAddExpression2(AAddExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression2(AAddExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression2(AAddExpression2 node)
    {
        InAAddExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAddExpression2(node);
    }
    public virtual void InAMinusExpression2(AMinusExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExpression2(AMinusExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExpression2(AMinusExpression2 node)
    {
        InAMinusExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAMinusExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InANegExpression3(ANegExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegExpression3(ANegExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegExpression3(ANegExpression3 node)
    {
        InANegExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegExpression3(node);
    }
    public virtual void InANotExpression3(ANotExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpression3(ANotExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpression3(ANotExpression3 node)
    {
        InANotExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAExpression4(AExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpression4(AExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpression4(AExpression4 node)
    {
        InAExpression4(node);
        if(node.GetCloseParent() != null)
        {
            node.GetCloseParent().Apply(this);
        }
        if(node.GetOrExpression() != null)
        {
            node.GetOrExpression().Apply(this);
        }
        if(node.GetOpenParent() != null)
        {
            node.GetOpenParent().Apply(this);
        }
        OutAExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}
} // namespace CS426.analysis
