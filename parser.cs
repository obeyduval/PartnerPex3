/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTKeywordWhile(TKeywordWhile node)
    {
        index = 0;
    }

    public override void CaseTKeywordLoop(TKeywordLoop node)
    {
        index = 1;
    }

    public override void CaseTKeywordConstant(TKeywordConstant node)
    {
        index = 2;
    }

    public override void CaseTKeywordStart(TKeywordStart node)
    {
        index = 3;
    }

    public override void CaseTKeywordEnd(TKeywordEnd node)
    {
        index = 4;
    }

    public override void CaseTKeywordIf(TKeywordIf node)
    {
        index = 5;
    }

    public override void CaseTKeywordElse(TKeywordElse node)
    {
        index = 6;
    }

    public override void CaseTKeywordFunction(TKeywordFunction node)
    {
        index = 7;
    }

    public override void CaseTKeywordThen(TKeywordThen node)
    {
        index = 8;
    }

    public override void CaseTEol(TEol node)
    {
        index = 9;
    }

    public override void CaseTAssign(TAssign node)
    {
        index = 10;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 11;
    }

    public override void CaseTMult(TMult node)
    {
        index = 12;
    }

    public override void CaseTDiv(TDiv node)
    {
        index = 13;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 14;
    }

    public override void CaseTEquiv(TEquiv node)
    {
        index = 15;
    }

    public override void CaseTNotEquiv(TNotEquiv node)
    {
        index = 16;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 17;
    }

    public override void CaseTGreatEqual(TGreatEqual node)
    {
        index = 18;
    }

    public override void CaseTLess(TLess node)
    {
        index = 19;
    }

    public override void CaseTLessEqual(TLessEqual node)
    {
        index = 20;
    }

    public override void CaseTSlash(TSlash node)
    {
        index = 21;
    }

    public override void CaseTOr(TOr node)
    {
        index = 22;
    }

    public override void CaseTEnd(TEnd node)
    {
        index = 23;
    }

    public override void CaseTIncrement(TIncrement node)
    {
        index = 24;
    }

    public override void CaseTDecrement(TDecrement node)
    {
        index = 25;
    }

    public override void CaseTNot(TNot node)
    {
        index = 26;
    }

    public override void CaseTComma(TComma node)
    {
        index = 27;
    }

    public override void CaseTSingQuote(TSingQuote node)
    {
        index = 28;
    }

    public override void CaseTLeftBracket(TLeftBracket node)
    {
        index = 29;
    }

    public override void CaseTRightBracket(TRightBracket node)
    {
        index = 30;
    }

    public override void CaseTOpenParent(TOpenParent node)
    {
        index = 31;
    }

    public override void CaseTCloseParent(TCloseParent node)
    {
        index = 32;
    }

    public override void CaseTDollar(TDollar node)
    {
        index = 33;
    }

    public override void CaseTId(TId node)
    {
        index = 34;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 35;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 36;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 37;
    }

    public override void CaseTString(TString node)
    {
        index = 38;
    }

    public override void CaseEOF(EOF node)
    {
        index = 39;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(0), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(3), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(4), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(4), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(4), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(5), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(5), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(5), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(6), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(6), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(6), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(7), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(8), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(9), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(10), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(11), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(11), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(12), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(13), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(14), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(15), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(15), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(16), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(16), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(17), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(17), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(18), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(18), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(18), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(18), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(18), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(19), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(19), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(19), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(20), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(20), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(20), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(21), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(21), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(21), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(22), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(22), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(22), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(23), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(23), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(24), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(24), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(24), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(24), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstantDec pconstantdecNode2 = (PConstantDec)nodeArrayList1[0];
        PProgram pprogramNode3 = (PProgram)nodeArrayList2[0];
        AConstantProgram pprogramNode1 = new AConstantProgram (
              pconstantdecNode2,
              pprogramNode3
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PProgram2 pprogram2Node2 = (PProgram2)nodeArrayList1[0];
        APassProgram pprogramNode1 = new APassProgram (
              pprogram2Node2
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionDec pfunctiondecNode2 = (PFunctionDec)nodeArrayList1[0];
        PProgram2 pprogram2Node3 = (PProgram2)nodeArrayList2[0];
        AMultipleProgram2 pprogram2Node1 = new AMultipleProgram2 (
              pfunctiondecNode2,
              pprogram2Node3
        );
        nodeList.Add(pprogram2Node1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PProgram3 pprogram3Node2 = (PProgram3)nodeArrayList1[0];
        APassProgram2 pprogram2Node1 = new APassProgram2 (
              pprogram3Node2
        );
        nodeList.Add(pprogram2Node1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMainProgram pmainprogramNode2 = (PMainProgram)nodeArrayList1[0];
        AMainProgram3 pprogram3Node1 = new AMainProgram3 (
              pmainprogramNode2
        );
        nodeList.Add(pprogram3Node1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        AMultipleStatements pstatementsNode1 = new AMultipleStatements (
              pstatementNode2,
              pstatementsNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ANoneStatements pstatementsNode1 = new ANoneStatements (
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclareStatement pdeclarestatementNode2 = (PDeclareStatement)nodeArrayList1[0];
        ADeclarationStatement pstatementNode1 = new ADeclarationStatement (
              pdeclarestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionCallStatement pfunctioncallstatementNode2 = (PFunctionCallStatement)nodeArrayList1[0];
        ACallStatement pstatementNode1 = new ACallStatement (
              pfunctioncallstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignStatement passignstatementNode2 = (PAssignStatement)nodeArrayList1[0];
        AAssignmentStatement pstatementNode1 = new AAssignmentStatement (
              passignstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStatement pifstatementNode2 = (PIfStatement)nodeArrayList1[0];
        AConditionalStatement pstatementNode1 = new AConditionalStatement (
              pifstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileStatement pwhilestatementNode2 = (PWhileStatement)nodeArrayList1[0];
        ALoopStatement pstatementNode1 = new ALoopStatement (
              pwhilestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POrExpression porexpressionNode2 = (POrExpression)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PArguments pargumentsNode4 = (PArguments)nodeArrayList3[0];
        AMultipleArguments pargumentsNode1 = new AMultipleArguments (
              porexpressionNode2,
              tcommaNode3,
              pargumentsNode4
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POrExpression porexpressionNode2 = (POrExpression)nodeArrayList1[0];
        ASingleArguments pargumentsNode1 = new ASingleArguments (
              porexpressionNode2
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ANoneArguments pargumentsNode1 = new ANoneArguments (
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TComma tcommaNode4 = (TComma)nodeArrayList3[0];
        PParameters pparametersNode5 = (PParameters)nodeArrayList4[0];
        AMultipleParameters pparametersNode1 = new AMultipleParameters (
              tidNode2,
              tidNode3,
              tcommaNode4,
              pparametersNode5
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        ASingleParameters pparametersNode1 = new ASingleParameters (
              tidNode2,
              tidNode3
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ANoneParameters pparametersNode1 = new ANoneParameters (
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclarationDeclareStatement pdeclarestatementNode1 = new ADeclarationDeclareStatement (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestatementNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TOpenParent topenparentNode3 = (TOpenParent)nodeArrayList2[0];
        PArguments pargumentsNode4 = (PArguments)nodeArrayList3[0];
        TCloseParent tcloseparentNode5 = (TCloseParent)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        ACallFunctionCallStatement pfunctioncallstatementNode1 = new ACallFunctionCallStatement (
              tidNode2,
              topenparentNode3,
              pargumentsNode4,
              tcloseparentNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallstatementNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        POrExpression porexpressionNode4 = (POrExpression)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignmentAssignStatement passignstatementNode1 = new AAssignmentAssignStatement (
              tidNode2,
              tassignNode3,
              porexpressionNode4,
              teolNode5
        );
        nodeList.Add(passignstatementNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordIf tkeywordifNode2 = (TKeywordIf)nodeArrayList1[0];
        TOpenParent topenparentNode3 = (TOpenParent)nodeArrayList2[0];
        POrExpression porexpressionNode4 = (POrExpression)nodeArrayList3[0];
        TCloseParent tcloseparentNode5 = (TCloseParent)nodeArrayList4[0];
        TLeftBracket tleftbracketNode6 = (TLeftBracket)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightBracket trightbracketNode8 = (TRightBracket)nodeArrayList7[0];
        PElseStatement pelsestatementNode9 = (PElseStatement)nodeArrayList8[0];
        AConditionalIfStatement pifstatementNode1 = new AConditionalIfStatement (
              tkeywordifNode2,
              topenparentNode3,
              porexpressionNode4,
              tcloseparentNode5,
              tleftbracketNode6,
              pstatementsNode7,
              trightbracketNode8,
              pelsestatementNode9
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordElse tkeywordelseNode2 = (TKeywordElse)nodeArrayList1[0];
        TLeftBracket tleftbracketNode3 = (TLeftBracket)nodeArrayList2[0];
        PStatements pstatementsNode4 = (PStatements)nodeArrayList3[0];
        TRightBracket trightbracketNode5 = (TRightBracket)nodeArrayList4[0];
        AMultElseStatement pelsestatementNode1 = new AMultElseStatement (
              tkeywordelseNode2,
              tleftbracketNode3,
              pstatementsNode4,
              trightbracketNode5
        );
        nodeList.Add(pelsestatementNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ANoneElseStatement pelsestatementNode1 = new ANoneElseStatement (
        );
        nodeList.Add(pelsestatementNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordWhile tkeywordwhileNode2 = (TKeywordWhile)nodeArrayList1[0];
        TLeftBracket tleftbracketNode3 = (TLeftBracket)nodeArrayList2[0];
        POrExpression porexpressionNode4 = (POrExpression)nodeArrayList3[0];
        TRightBracket trightbracketNode5 = (TRightBracket)nodeArrayList4[0];
        TEnd tendNode6 = (TEnd)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TEnd tendNode8 = (TEnd)nodeArrayList7[0];
        ALoopWhileStatement pwhilestatementNode1 = new ALoopWhileStatement (
              tkeywordwhileNode2,
              tleftbracketNode3,
              porexpressionNode4,
              trightbracketNode5,
              tendNode6,
              pstatementsNode7,
              tendNode8
        );
        nodeList.Add(pwhilestatementNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordConstant tkeywordconstantNode2 = (TKeywordConstant)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TAssign tassignNode5 = (TAssign)nodeArrayList4[0];
        POrExpression porexpressionNode6 = (POrExpression)nodeArrayList5[0];
        TEol teolNode7 = (TEol)nodeArrayList6[0];
        AConstantConstantDec pconstantdecNode1 = new AConstantConstantDec (
              tkeywordconstantNode2,
              tidNode3,
              tidNode4,
              tassignNode5,
              porexpressionNode6,
              teolNode7
        );
        nodeList.Add(pconstantdecNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList12 = (ArrayList) Pop();
        ArrayList nodeArrayList11 = (ArrayList) Pop();
        ArrayList nodeArrayList10 = (ArrayList) Pop();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordFunction tkeywordfunctionNode2 = (TKeywordFunction)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TOpenParent topenparentNode4 = (TOpenParent)nodeArrayList3[0];
        TString tstringNode5 = (TString)nodeArrayList4[0];
        TCloseParent tcloseparentNode6 = (TCloseParent)nodeArrayList5[0];
        TEnd tendNode7 = (TEnd)nodeArrayList6[0];
        TDollar tdollarNode8 = (TDollar)nodeArrayList7[0];
        PParameters pparametersNode9 = (PParameters)nodeArrayList8[0];
        TEol teolNode10 = (TEol)nodeArrayList9[0];
        PStatements pstatementsNode11 = (PStatements)nodeArrayList10[0];
        TKeywordEnd tkeywordendNode12 = (TKeywordEnd)nodeArrayList11[0];
        TEnd tendNode13 = (TEnd)nodeArrayList12[0];
        AMultipleFunctionDec pfunctiondecNode1 = new AMultipleFunctionDec (
              tkeywordfunctionNode2,
              tidNode3,
              topenparentNode4,
              tstringNode5,
              tcloseparentNode6,
              tendNode7,
              tdollarNode8,
              pparametersNode9,
              teolNode10,
              pstatementsNode11,
              tkeywordendNode12,
              tendNode13
        );
        nodeList.Add(pfunctiondecNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordStart tkeywordstartNode2 = (TKeywordStart)nodeArrayList1[0];
        TEnd tendNode3 = (TEnd)nodeArrayList2[0];
        TLeftBracket tleftbracketNode4 = (TLeftBracket)nodeArrayList3[0];
        PStatements pstatementsNode5 = (PStatements)nodeArrayList4[0];
        TRightBracket trightbracketNode6 = (TRightBracket)nodeArrayList5[0];
        TKeywordEnd tkeywordendNode7 = (TKeywordEnd)nodeArrayList6[0];
        TEnd tendNode8 = (TEnd)nodeArrayList7[0];
        AMainMainProgram pmainprogramNode1 = new AMainMainProgram (
              tkeywordstartNode2,
              tendNode3,
              tleftbracketNode4,
              pstatementsNode5,
              trightbracketNode6,
              tkeywordendNode7,
              tendNode8
        );
        nodeList.Add(pmainprogramNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ANoneMainProgram pmainprogramNode1 = new ANoneMainProgram (
        );
        nodeList.Add(pmainprogramNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POrExpression porexpressionNode2 = (POrExpression)nodeArrayList1[0];
        TOr torNode3 = (TOr)nodeArrayList2[0];
        PAndExpression pandexpressionNode4 = (PAndExpression)nodeArrayList3[0];
        AOrOrExpression porexpressionNode1 = new AOrOrExpression (
              porexpressionNode2,
              torNode3,
              pandexpressionNode4
        );
        nodeList.Add(porexpressionNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAndExpression pandexpressionNode2 = (PAndExpression)nodeArrayList1[0];
        APassOrExpression porexpressionNode1 = new APassOrExpression (
              pandexpressionNode2
        );
        nodeList.Add(porexpressionNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAndExpression pandexpressionNode2 = (PAndExpression)nodeArrayList1[0];
        TAnd tandNode3 = (TAnd)nodeArrayList2[0];
        PEqualExpressions pequalexpressionsNode4 = (PEqualExpressions)nodeArrayList3[0];
        AAndAndExpression pandexpressionNode1 = new AAndAndExpression (
              pandexpressionNode2,
              tandNode3,
              pequalexpressionsNode4
        );
        nodeList.Add(pandexpressionNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PEqualExpressions pequalexpressionsNode2 = (PEqualExpressions)nodeArrayList1[0];
        APassAndExpression pandexpressionNode1 = new APassAndExpression (
              pequalexpressionsNode2
        );
        nodeList.Add(pandexpressionNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PEqualExpressions pequalexpressionsNode2 = (PEqualExpressions)nodeArrayList1[0];
        TLessEqual tlessequalNode3 = (TLessEqual)nodeArrayList2[0];
        PQuantityExpression pquantityexpressionNode4 = (PQuantityExpression)nodeArrayList3[0];
        ALessEqualEqualExpressions pequalexpressionsNode1 = new ALessEqualEqualExpressions (
              pequalexpressionsNode2,
              tlessequalNode3,
              pquantityexpressionNode4
        );
        nodeList.Add(pequalexpressionsNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PEqualExpressions pequalexpressionsNode2 = (PEqualExpressions)nodeArrayList1[0];
        TGreatEqual tgreatequalNode3 = (TGreatEqual)nodeArrayList2[0];
        PQuantityExpression pquantityexpressionNode4 = (PQuantityExpression)nodeArrayList3[0];
        AGreatEqualEqualExpressions pequalexpressionsNode1 = new AGreatEqualEqualExpressions (
              pequalexpressionsNode2,
              tgreatequalNode3,
              pquantityexpressionNode4
        );
        nodeList.Add(pequalexpressionsNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PEqualExpressions pequalexpressionsNode2 = (PEqualExpressions)nodeArrayList1[0];
        TNotEquiv tnotequivNode3 = (TNotEquiv)nodeArrayList2[0];
        PQuantityExpression pquantityexpressionNode4 = (PQuantityExpression)nodeArrayList3[0];
        ANotEquivEqualExpressions pequalexpressionsNode1 = new ANotEquivEqualExpressions (
              pequalexpressionsNode2,
              tnotequivNode3,
              pquantityexpressionNode4
        );
        nodeList.Add(pequalexpressionsNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PEqualExpressions pequalexpressionsNode2 = (PEqualExpressions)nodeArrayList1[0];
        TEquiv tequivNode3 = (TEquiv)nodeArrayList2[0];
        PQuantityExpression pquantityexpressionNode4 = (PQuantityExpression)nodeArrayList3[0];
        AEquivEqualExpressions pequalexpressionsNode1 = new AEquivEqualExpressions (
              pequalexpressionsNode2,
              tequivNode3,
              pquantityexpressionNode4
        );
        nodeList.Add(pequalexpressionsNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PQuantityExpression pquantityexpressionNode2 = (PQuantityExpression)nodeArrayList1[0];
        APassEqualExpressions pequalexpressionsNode1 = new APassEqualExpressions (
              pquantityexpressionNode2
        );
        nodeList.Add(pequalexpressionsNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PQuantityExpression pquantityexpressionNode2 = (PQuantityExpression)nodeArrayList1[0];
        TGreater tgreaterNode3 = (TGreater)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AGreaterQuantityExpression pquantityexpressionNode1 = new AGreaterQuantityExpression (
              pquantityexpressionNode2,
              tgreaterNode3,
              pexpressionNode4
        );
        nodeList.Add(pquantityexpressionNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PQuantityExpression pquantityexpressionNode2 = (PQuantityExpression)nodeArrayList1[0];
        TLess tlessNode3 = (TLess)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ALessQuantityExpression pquantityexpressionNode1 = new ALessQuantityExpression (
              pquantityexpressionNode2,
              tlessNode3,
              pexpressionNode4
        );
        nodeList.Add(pquantityexpressionNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        APassQuantityExpression pquantityexpressionNode1 = new APassQuantityExpression (
              pexpressionNode2
        );
        nodeList.Add(pquantityexpressionNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AMultExpression pexpressionNode1 = new AMultExpression (
              pexpressionNode2,
              tmultNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TDiv tdivNode3 = (TDiv)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        ADivExpression pexpressionNode1 = new ADivExpression (
              pexpressionNode2,
              tdivNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        APassExpression pexpressionNode1 = new APassExpression (
              pexpression2Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        AAddExpression2 pexpression2Node1 = new AAddExpression2 (
              pexpression2Node2,
              tplusNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        AMinusExpression2 pexpression2Node1 = new AMinusExpression2 (
              pexpression2Node2,
              tminusNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        APassExpression2 pexpression2Node1 = new APassExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        PExpression3 pexpression3Node3 = (PExpression3)nodeArrayList2[0];
        ANegExpression3 pexpression3Node1 = new ANegExpression3 (
              tminusNode2,
              pexpression3Node3
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        PExpression3 pexpression3Node3 = (PExpression3)nodeArrayList2[0];
        ANotExpression3 pexpression3Node1 = new ANotExpression3 (
              tnotNode2,
              pexpression3Node3
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        APassExpression3 pexpression3Node1 = new APassExpression3 (
              pexpression4Node2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOpenParent topenparentNode2 = (TOpenParent)nodeArrayList1[0];
        POrExpression porexpressionNode3 = (POrExpression)nodeArrayList2[0];
        TCloseParent tcloseparentNode4 = (TCloseParent)nodeArrayList3[0];
        AExpression4 pexpression4Node1 = new AExpression4 (
              topenparentNode2,
              porexpressionNode3,
              tcloseparentNode4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassExpression4 pexpression4Node1 = new APassExpression4 (
              poperandNode2
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFloatOperand poperandNode1 = new AFloatOperand (
              tfloatNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringOperand poperandNode1 = new AStringOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 28},
        new int[] {2, 0, 1},
        new int[] {3, 0, 2},
        new int[] {7, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {34, 0, 10},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {23, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {34, 0, 12},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {39, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 28},
        new int[] {2, 0, 1},
        new int[] {3, 0, 2},
        new int[] {7, 0, 3},
      },
      new int[][] {
        new int[] {-1, 1, 28},
        new int[] {3, 0, 2},
        new int[] {7, 0, 3},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {34, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {29, 0, 16},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {31, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {10, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {38, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {29, 0, 46},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {31, 0, 47},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {10, 0, 48},
        new int[] {31, 0, 49},
        new int[] {34, 0, 50},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {30, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {32, 0, 53},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 55},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {9, 0, 57},
        new int[] {22, 0, 58},
      },
      new int[][] {
        new int[] {-1, 1, 30},
        new int[] {36, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 32},
        new int[] {15, 0, 60},
        new int[] {16, 0, 61},
        new int[] {18, 0, 62},
        new int[] {20, 0, 63},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {17, 0, 64},
        new int[] {19, 0, 65},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {12, 0, 66},
        new int[] {13, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {11, 0, 68},
        new int[] {14, 0, 69},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 50},
        new int[] {9, 0, 75},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {4, 0, 76},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {23, 0, 77},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 3, 56},
        new int[] {22, 0, 58},
        new int[] {32, 0, 78},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 62},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 64},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 70},
        new int[] {22, 0, 58},
        new int[] {30, 0, 91},
      },
      new int[][] {
        new int[] {-1, 3, 71},
        new int[] {22, 0, 58},
        new int[] {32, 0, 92},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {9, 0, 93},
        new int[] {22, 0, 58},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {32, 0, 94},
      },
      new int[][] {
        new int[] {-1, 1, 13},
        new int[] {22, 0, 58},
        new int[] {27, 0, 95},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 3, 76},
        new int[] {23, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 77},
        new int[] {33, 0, 97},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 1, 29},
        new int[] {36, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 31},
        new int[] {15, 0, 60},
        new int[] {16, 0, 61},
        new int[] {18, 0, 62},
        new int[] {20, 0, 63},
      },
      new int[][] {
        new int[] {-1, 1, 36},
        new int[] {17, 0, 64},
        new int[] {19, 0, 65},
      },
      new int[][] {
        new int[] {-1, 1, 35},
        new int[] {17, 0, 64},
        new int[] {19, 0, 65},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {17, 0, 64},
        new int[] {19, 0, 65},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {17, 0, 64},
        new int[] {19, 0, 65},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {12, 0, 66},
        new int[] {13, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {12, 0, 66},
        new int[] {13, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {11, 0, 68},
        new int[] {14, 0, 69},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {11, 0, 68},
        new int[] {14, 0, 69},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {23, 0, 98},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {29, 0, 99},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {9, 0, 100},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {14, 0, 30},
        new int[] {26, 0, 31},
        new int[] {31, 0, 32},
        new int[] {34, 0, 33},
        new int[] {35, 0, 34},
        new int[] {37, 0, 35},
        new int[] {38, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {34, 0, 102},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 3, 102},
        new int[] {34, 0, 106},
      },
      new int[][] {
        new int[] {-1, 3, 103},
        new int[] {9, 0, 107},
      },
      new int[][] {
        new int[] {-1, 3, 104},
        new int[] {23, 0, 108},
      },
      new int[][] {
        new int[] {-1, 3, 105},
        new int[] {30, 0, 109},
      },
      new int[][] {
        new int[] {-1, 1, 16},
        new int[] {27, 0, 110},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {6, 0, 112},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {34, 0, 102},
      },
      new int[][] {
        new int[] {-1, 3, 111},
        new int[] {4, 0, 115},
      },
      new int[][] {
        new int[] {-1, 3, 112},
        new int[] {29, 0, 116},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 3, 115},
        new int[] {23, 0, 117},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 3, 118},
        new int[] {30, 0, 119},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 4},
        new int[] {7, 13},
      },
      new int[][] {
        new int[] {-1, 5},
        new int[] {8, 14},
      },
      new int[][] {
        new int[] {-1, 6},
      },
      new int[][] {
        new int[] {-1, 22},
        new int[] {23, 52},
        new int[] {98, 104},
        new int[] {99, 105},
        new int[] {107, 111},
        new int[] {116, 118},
      },
      new int[][] {
        new int[] {-1, 23},
      },
      new int[][] {
        new int[] {-1, 73},
        new int[] {95, 101},
      },
      new int[][] {
        new int[] {-1, 103},
        new int[] {110, 114},
      },
      new int[][] {
        new int[] {-1, 24},
      },
      new int[][] {
        new int[] {-1, 25},
      },
      new int[][] {
        new int[] {-1, 26},
      },
      new int[][] {
        new int[] {-1, 27},
      },
      new int[][] {
        new int[] {-1, 113},
      },
      new int[][] {
        new int[] {-1, 28},
      },
      new int[][] {
        new int[] {-1, 7},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 9},
      },
      new int[][] {
        new int[] {-1, 74},
        new int[] {18, 37},
        new int[] {32, 56},
        new int[] {46, 70},
        new int[] {47, 71},
        new int[] {48, 72},
      },
      new int[][] {
        new int[] {-1, 38},
        new int[] {58, 79},
      },
      new int[][] {
        new int[] {-1, 39},
        new int[] {59, 80},
      },
      new int[][] {
        new int[] {-1, 40},
        new int[] {60, 81},
        new int[] {61, 82},
        new int[] {62, 83},
        new int[] {63, 84},
      },
      new int[][] {
        new int[] {-1, 41},
        new int[] {64, 85},
        new int[] {65, 86},
      },
      new int[][] {
        new int[] {-1, 42},
        new int[] {66, 87},
        new int[] {67, 88},
      },
      new int[][] {
        new int[] {-1, 43},
        new int[] {30, 54},
        new int[] {31, 55},
        new int[] {68, 89},
        new int[] {69, 90},
      },
      new int[][] {
        new int[] {-1, 44},
      },
      new int[][] {
        new int[] {-1, 45},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'constant', 'start', 'function', EOF",
      "expecting: id",
      "expecting: ':'",
      "expecting: EOF",
      "expecting: 'start', 'function', EOF",
      "expecting: '{'",
      "expecting: '('",
      "expecting: '='",
      "expecting: 'while', 'if', '}', id",
      "expecting: string",
      "expecting: '-', '!', '(', id, integer, float, string",
      "expecting: '=', '(', id",
      "expecting: '}'",
      "expecting: 'while', 'end', 'if', ':', '}', id",
      "expecting: ')'",
      "expecting: ';', '+', '*', '/', '-', '=', '!=', '>', '>=', '<', '<=', '||', ',', '}', ')', '&'",
      "expecting: ';', '||'",
      "expecting: ';', '||', ',', '}', ')', '&'",
      "expecting: ';', '=', '!=', '>=', '<=', '||', ',', '}', ')', '&'",
      "expecting: ';', '=', '!=', '>', '>=', '<', '<=', '||', ',', '}', ')', '&'",
      "expecting: ';', '*', '/', '=', '!=', '>', '>=', '<', '<=', '||', ',', '}', ')', '&'",
      "expecting: '-', '!', '(', ')', id, integer, float, string",
      "expecting: ';'",
      "expecting: 'end'",
      "expecting: 'end', ':', '}'",
      "expecting: '||', ')'",
      "expecting: '||', '}'",
      "expecting: '||', ',', ')'",
      "expecting: '$'",
      "expecting: ';', id",
      "expecting: 'while', 'if', ':', id",
      "expecting: ';', ','",
      "expecting: 'while', 'end', 'if', id",
      "expecting: 'while', 'end', 'if', 'else', ':', '}', id",
    };

    private static int[] errors = {
      0, 1, 2, 1, 3, 3, 3, 0, 4, 3, 1, 5, 6, 3, 3, 7, 
      8, 9, 10, 5, 6, 11, 12, 13, 13, 13, 13, 13, 13, 14, 10, 10, 
      10, 15, 15, 15, 15, 16, 17, 18, 19, 20, 15, 15, 15, 15, 10, 10, 
      10, 21, 22, 23, 24, 2, 15, 15, 25, 0, 10, 10, 10, 10, 10, 10, 
      10, 10, 10, 10, 10, 10, 26, 25, 16, 14, 27, 13, 2, 28, 15, 17, 
      18, 19, 19, 19, 19, 20, 20, 15, 15, 15, 15, 2, 5, 13, 22, 21, 
      3, 29, 30, 8, 13, 14, 1, 22, 2, 12, 31, 32, 13, 33, 29, 23, 
      5, 13, 22, 2, 8, 4, 12, 13, 
    };
}
}
